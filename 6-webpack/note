· 使用webpack完成简单工程化（web-excel
    跨模块引用、配置loader、
    打包

· 多页面配置（h5-mutil
    多页面
    独立编译

· 基于webpack的跨模块引用

========================================================
基本工程化：
    npm run dev: 读取了package.json 的文件
        dev 对应脚本: 
        "scripts": {
            "dev": "webpack-dev-server --open --config webpack.dev.js",
            "build": "webpack --config webpack.prod.js"
        }
        必备包: webpack, webpack-dev-server
     webpack.dev.js：
        主要是做了 
            entry
            plugins：HtmlWebpackPlugin 将生成的产物插入html里
            output
            module：配置针对什么文件做什么转换
        mode变量： 设定当前是开发环境 dev 还是 生产环境 （生产环境会配置产物压缩 清理console等逻辑）
========================================================
给基本工程化加点料：
    h5开发脚手架：学习资料 https://github.com/sunniejs/vue-h5-template
        设置别名alias √
        rem适配方案 √
        axios接口封装及接口管理 √
        proxy跨域 √
        多页面打包 multi-page & 项目文件结构配置
        配置多环境变量 & 打包、运行 多项目分离
        工具类函数封装（or 抽象成npm包？ 工具类函数如果放在本地，则可以挂载在vue实例上
        常用组件封装 （弹窗、
        性能优化：
            externals引入 cdn资源（vue 第三方文件 放在cdn上
            splitchunk
            webpack可视化分析
            首页添加骨架屏 vue-skeleton-webpack-plugin
        生产与开发分离：
            生产去掉console
        便捷：
            压缩图片
            静态资源自动打包上传到cdn
        ie兼容
        h5分享组件：
            参照手百提供的功能： 直接分享微信好友、微信朋友圈、微博、qq & 截屏分享 带有icon的那种
            https://github.com/overtrue/share.js

====================================
1、rem适配方案
    需要的东西：
        flexible.js 
            即： 
                // 设计稿是1920px, 这是无法改变的，我可以将页面宽度设计为10rem, 此时10rem = 1920px 即1rem = 192px
                    我设计的页面宽度10rem 决定了rem这个单位在这个页面里的大小，如果我设计成100rem那么 1rem  = 19.2px 这样单位就变小
                    rem布局的原理是 获取当前页面的视口宽度 clientWidth / 设计稿宽度， 此时得到放大比例scale，
                                   将scale作用于 设计根元素字体大小html.fontsize = xx; 
                                   其他页面元素都使用rem单位，rem是相对于根字体大小的，从而实现 resize=> 根字体大小变化 => 页面大小变化
                    而回归到业务代码里，此时我看到设计稿的按钮占满了 1920px设计稿的宽度
                    那么 button = 960px 此时在页面设计为10rem的情况下 button换算为rem单位 应该是？
                        
                        所以 按钮宽度 =   960px有多少个rem? (1rem = 192px) 所以 960/192 = 5rem
                        const basesize = 192; // 1rem = 192px; 
                        const scale = document.documentElement.clientWidth / 1920;
                        而html.fontsize =  (basesize * scale) + 'px';

        而postcss-pxtorem
        // 但是stretch 有rem单位， 当1rem=16px时 可看到页面占77.3rem 所以basesize = 77.3 而设计稿是以414*3的宽度设计的
           所以在ue图有rem单位的情况下 无需此插件了 flexible.js 设计好即可
                module.exports = {
                    plugins: {
                        autoprefixer: {
                            overrideBrowserslist: ['Android 4.1', 'iOS 7.1', 'Chrome > 31', 'ff > 31', 'ie >= 8']
                        },
                        'postcss-pxtorem': {
                            rootValue: 37.5, // 375px的设计稿 看成10rem宽
                            propList: ['*']
                        }
                    }
                }


2、配置环境变量
        VUE_APP_ENV = 'production'
      以 VUE_APP_ 开头的变量，在代码中可以通过 process.env.VUE_APP_ 访问。
      比如,VUE_APP_ENV = 'development' 通过process.env.VUE_APP_ENV 访问。
      除了 VUE_APP_* 变量之外，在你的应用代码中始终可用的还有两个特殊的变量NODE_ENV 和BASE_URL
      根据当前不同的打包环境，配置publicPath 文件引用的相对路径

3、deploy.js 部署
    3.1 npm run build
        通过配置 env.production.js的baseurl， 变量注入到 vue.config.js 里的publicpath 决定html文件的src引用
    3.2 npm run deploy: 产物打包 并 将产物传到 机器上的
4、多页面配置
    多页面启动
        vue.config.js 配置pages属性
        /src/pages 下面维护单独的页面，有独立的入口文件、根vue、单独的index.html模板
        字段分别在pages下可配置
        npm run serve 后， 页面访问 localhost:8080/2019.html 即可跳转，而页面之间的跳转是原始的跳xxx.html

        打包产物：
            common-chunk.js,  page1.html+page1.js
        构建速度： 加了pages属性很明显的感觉到 编译速度的下跌

    多页面独立打包
    多页面资源部署
    多页面配置router
5、优化
    css：全局变量 函数，$cdn 设置
    commonchunck：将vue、axios文件放在cdn上