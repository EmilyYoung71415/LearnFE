
总结：
本质也是 基于数据的传递，
    感觉所有的设计都是 依赖的底层是
        1、数据是共享地址的，函数内拿到的是引用地址
        2、函数在js里是第一等公民，函数参数、返回值都可以是函数
                所以有了 高阶函数，以及外界传入回调，库里决定啥时候调用回调这样的处理方式实现 开放性

    其余的都是一些技巧：
        1、vuex 基于 回调，在特定时期调用 回调集
        2、axios 库里内部管理了回调，高级的地方在于 引入了promise，将回调处理成了链式集合，以此管理异步、同步的问题
        3、koa、redux， 使用了高阶函数 compose
    
    更完善一些的,https://juejin.im/post/6844904102862782471#heading-12
    比如 vue的生命周期，webpack 等，作为一个完整的插件体系来说
    需要库设计钩子函数，插件注册等过程
    这里有个 简单的demo，一个原生的插件体系 
    想看看完美点的实现方案？ 推荐看webpack的tapable核心依赖库：
            提供了丰富的钩子类型：同步钩子、异步并行钩子、异步串行钩子等

引申：https://zhuanlan.zhihu.com/p/54460682
    有没有啥办法，不让库（源代码）提供接口，自己就能实现注入、拦截的功能呢？
    即假如面对这样的问题：
        有一个被业务广泛使用的函数(比如common的log)，
        我们是否能够在既不更改调用它的业务代码，也不更改该函数源码的前提下，
        在其(执行前后)注入一段我们自定义的逻辑呢？

    1、数据劫持 proxy defineProperty
    2、基于原型链劫持


    下面给出一两个可以思考的demo点
demo1、劫持console.log 做点啥 在每一个console.log前后做点啥
demo2、如何捕获浏览器用户的所有行为？

import Vue from 'vue'

Vue.prototype.$emit = withHookBefore(Vue.prototype.$emit, (name, payload) => {
  // 在此发挥黑魔法
  console.log('emitting', name, payload)
})

function withHookBefore (originalFn, hookFn) {
  return function () {
    hookFn.apply(this, arguments)
    return originalFn.apply(this, arguments)
  }
}


基于对 console.log 的插桩，可以让我们实现跨屏的日志收集（比如在你的机器上实时查看其他设备的操作日志）
基于对 DOM API 的插桩，可以让我们实现对业务无侵入的埋点，以及用户行为的录制与回放。
基于对组件生命周期钩子的插桩，可以让我们实现更精确而无痛的性能收集与分析。





