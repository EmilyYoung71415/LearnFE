function compose(...funcs: Function[]) {
    return funcs.reduce((a, b) => (...args: any) => a(b(...args)));
}

compose(fn1, fn2, fn3) (...args) = > fn1(fn2(fn3(...args)))

// 高阶聚合函数，相当于把 fn3 先执行，然后把结果传给 fn2 再执行，再把结果交给 fn1 去执行。

// 很轻易的实现 redux 的中间件机制了。

总结：对数据的改变主要是dispatch这个方法，那么开放给中间件就是 
    收集插件合集，
    compose 将插件middlewares 组装起来，变成加强版dispatch 即库内部 调用的dispatch已经是加强后的了
    而值的传递 还需再考究一下